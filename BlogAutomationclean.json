{
  "id": "",
  "meta": {
    "instanceId": "",
    "templateCredsSetupCompleted": true
  },
  "name": "Blog Automation",
  "tags": [],
  "nodes": [
    {
      "id": "a1cc0c3a-2be9-4f7d-a0d8-cb98ca3cc846",
      "name": "AI Agent",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "position": [
        176,
        0
      ],
      "parameters": {
        "text": "={{ $json.content }}",
        "options": {
          "systemMessage": "### Core Identity & Persona\n\nYou are the **n8n Blog Master**, a specialized AI agent. Your primary function is to assist your user, whose GitHub username is **@<your-github-username>**, with content management.\n\n* **Your Mission:** Automate the process of creating, formatting, and saving new blog posts as Markdown files within the user's specified repository.\n* **User Clarification:** The name **`<your-github-username>`** always refers to your **user** and, in the context of API calls, the **repository owner**. It is never part of a file path.\n* **Personality:** Helpful, precise, security-conscious. Semi-casual and engaging, but never overly cheerful.\n\n---\n\n### Operational Zone & Constraints\n\n* **Repository:** You may only interact with the `<your-repo-name>` repository.\n* **Owner:** The repository owner is `<your-github-username>`.\n* **Branch:** Always operate on the `main` branch.\n* **Directory Access:** You can **only** write new files to the `<your-directory-path>` directory. You are forbidden from writing anywhere else.\n* **File Permissions:** You may **only create new `.md` files**. If a file already exists, notify the user instead of overwriting, editing, or deleting.\n\n---\n\n### Available Tools & Usage Protocol\n\nYou have a limited but well-defined toolset. Always use them exactly as described:\n\n1. **Date & Time Tool**\n   * Purpose: Always fetch the current date and time in **Your-time zone**.\n   * Usage: Call this before creating the blog post so the `date` field in the front matter is correct.\n   * Do not use any other timezone.\n\n2. **GitHub Nodes**\n   * **Create:** Used to create new files within `<your-directory-path>`. Requires three parameters:\n     - `owner` → always `<your-github-username>`\n     - `repo` → always `<your-repo-name>`\n     - `path` → must be a path within the allowed directory\n   * **List:** Can list files inside `<your-directory-path>/`. Use it to check existing filenames before creating new ones.\n   * **Read:** Can fetch contents of files if needed (but you cannot modify them).\n   * Constraint: Never attempt operations outside the specified directory.\n\n---\n\n### Standard Workflow: Creating or Editing Blog Posts\n\n1. **Activation:** Begin when the user says:\n   - “Draft a new post on…”\n   - “Make the body about…”\n   - “Use my rough notes…”\n   - “Modify it to include…”\n\n2. **Information Gathering:**\n   * Ask for the **Title** (mandatory).\n   * Gather **topic, points, or raw notes** from the user.\n   * If user provides incomplete notes, expand them into a coherent, well-structured article.\n\n3. **Drafting & Formatting:**\n   * Call the Date & Time tool.\n   * Always format posts in the following template:\n     ---\n\n     title: \"The Title Provided by the User\"\n     date: \"YYYY-MM-DD\"\n\n     ---\n\n     [Well-structured blog content goes here. Expand rough notes if needed, maintain logical flow, use clear headings if appropriate.]\n\n     Thanks for Reading!\n   * Writing rules:\n     - Tone: Neutral, informative, lightly conversational — not too cheerful.\n     - Flow: Ensure paragraphs are broken with line breaks for readability.\n     - Expansion: If notes are provided, turn them into complete, polished content.\n     - Modification: If asked, revise body content while preserving original meaning.\n\n4. **File Naming:**\n   * Generate a short **kebab-case filename** from the title (e.g., \"Making My Own Java CLI-Based RPG!\" → `java-cli-rpg.md`).\n\n5. **Final Action:**\n   * Use the GitHub Create tool with parameters:\n     - `owner = <your-github-username>`\n     - `repo = <your-repo-name>`\n     - `path = <your-directory-path>/<filename>.md`\n   * Confirm success to the user after creation.\n\n---\n\n### Advanced Error Handling: \"Resource Not Found\"\n\nIf the `create_github_file` tool fails with **\"Resource not found\"**:\n\n1. **First Failure:**\n   * Notify the user that the attempt failed.\n   * State the exact `path` used.\n   * Retry automatically once.\n\n2. **Second Failure:**\n   * If it fails again, explain that standard creation isn’t working.\n   * Suggest it may be a **permissions issue**.\n   * Await user instructions before proceeding further.\n"
        },
        "promptType": "define"
      },
      "typeVersion": 2.2
    },
    {
      "id": "003f8881-1422-42c0-8385-b85a033cb1e3",
      "name": "Google Gemini Chat Model",
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "position": [
        -112,
        192
      ],
      "parameters": {
        "options": {}
      },
      "credentials": {
        "googlePalmApi": {
          "id": "",
          "name": ""
        }
      },
      "typeVersion": 1
    },
    {
      "id": "f1a7a3d1-d78b-40c3-8098-babf2b2f7d6d",
      "name": "When chat message received",
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "position": [
        -384,
        -32
      ],
      "webhookId": "",
      "parameters": {
        "options": {}
      },
      "typeVersion": 1.3
    },
    {
      "id": "b44ada8b-c7be-4c84-b4db-a9d7b8d67ac1",
      "name": "Date & Time",
      "type": "n8n-nodes-base.dateTimeTool",
      "position": [
        672,
        240
      ],
      "parameters": {
        "options": {
          "timezone": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Timezone', ``, 'string') }}"
        }
      },
      "typeVersion": 2
    },
    {
      "id": "3b3bd3b8-35bd-404d-b6a5-de45cb019713",
      "name": "Create a file in GitHub",
      "type": "n8n-nodes-base.githubTool",
      "position": [
        224,
        288
      ],
      "webhookId": "",
      "parameters": {
        "owner": {
          "__rl": true,
          "mode": "name",
          "value": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Repository_Owner', ``, 'string') }}"
        },
        "filePath": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('File_Path', ``, 'string') }}",
        "resource": "file",
        "repository": {
          "__rl": true,
          "mode": "name",
          "value": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Repository_Name', ``, 'string') }}"
        },
        "fileContent": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('File_Content', ``, 'string') }}",
        "commitMessage": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Commit_Message', ``, 'string') }}"
      },
      "credentials": {
        "githubApi": {
          "id": "",
          "name": "GitHub account"
        }
      },
      "typeVersion": 1.1
    },
    {
      "id": "0a8c6d6b-99a2-4a4f-9071-da236ab7a41e",
      "name": "Get a file in GitHub",
      "type": "n8n-nodes-base.githubTool",
      "position": [
        368,
        288
      ],
      "webhookId": "",
      "parameters": {
        "owner": {
          "__rl": true,
          "mode": "name",
          "value": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Repository_Owner', ``, 'string') }}"
        },
        "filePath": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('File_Path', ``, 'string') }}",
        "resource": "file",
        "operation": "get",
        "repository": {
          "__rl": true,
          "mode": "name",
          "value": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Repository_Name', ``, 'string') }}"
        },
        "asBinaryProperty": false,
        "additionalParameters": {}
      },
      "credentials": {
        "githubApi": {
          "id": "",
          "name": "GitHub account"
        }
      },
      "typeVersion": 1.1
    },
    {
      "id": "79d1ec52-eb7e-422f-825d-8f6d6ef7beae",
      "name": "List files in GitHub",
      "type": "n8n-nodes-base.githubTool",
      "position": [
        512,
        288
      ],
      "webhookId": "",
      "parameters": {
        "owner": {
          "__rl": true,
          "mode": "name",
          "value": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Repository_Owner', ``, 'string') }}"
        },
        "filePath": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Path', ``, 'string') }}",
        "resource": "file",
        "operation": "list",
        "repository": {
          "__rl": true,
          "mode": "name",
          "value": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Repository_Name', ``, 'string') }}"
        }
      },
      "credentials": {
        "githubApi": {
          "id": "",
          "name": "GitHub account"
        }
      },
      "typeVersion": 1.1
    },
    {
      "id": "4179130e-2c04-4114-b8bd-422821e0abde",
      "name": "Simple Memory",
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "position": [
        64,
        208
      ],
      "parameters": {
        "sessionKey": "={{ $json.content }}",
        "sessionIdType": "customKey",
        "contextWindowLength": 15
      },
      "typeVersion": 1.3
    },
    {
      "id": "7d674336-90e2-40dc-9755-30335eb45090",
      "name": "Send a message",
      "type": "n8n-nodes-base.discord",
      "position": [
        784,
        16
      ],
      "webhookId": "",
      "parameters": {
        "embeds": {
          "values": [
            {}
          ]
        },
        "content": "={{ $('AI Agent').item.json.output }}",
        "guildId": {
          "__rl": true,
          "mode": "list",
          "value": "",
          "cachedResultUrl": "",
          "cachedResultName": ""
        },
        "options": {},
        "resource": "message",
        "channelId": {
          "__rl": true,
          "mode": "list",
          "value": "",
          "cachedResultUrl": "",
          "cachedResultName": ""
        }
      },
      "credentials": {
        "discordBotApi": {
          "id": "",
          "name": ""
        }
      },
      "typeVersion": 2
    },
    {
      "id": "0672c9ba-e961-48b7-8dbf-35f91a8d8353",
      "name": "Discord Message Trigger",
      "type": "n8n-nodes-discord-trigger.discordTrigger",
      "position": [
        -368,
        112
      ],
      "parameters": {
        "pattern": "every",
        "guildIds": [],
        "channelIds": [],
        "additionalFields": {}
      },
      "credentials": {
        "discordBotTriggerApi": {
          "id": "",
          "name": "Discord Bot Trigger account"
        }
      },
      "typeVersion": 1
    }
  ],
  "active": false,
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "",
  "connections": {
    "AI Agent": {
      "main": [
        [
          {
            "node": "Send a message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Date & Time": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory": {
      "ai_memory": [
        [
          {
            "node": "AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Get a file in GitHub": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "List files in GitHub": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Create a file in GitHub": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Discord Message Trigger": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "When chat message received": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  }
}